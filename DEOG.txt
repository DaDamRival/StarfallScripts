--  DDDDDDDDDDDDD      EEEEEEEEEEEEEEEEEEEEEE     OOOOOOOOO             GGGGGGGGGGGGG
--  D::::::::::::DDD   E::::::::::::::::::::E   OO:::::::::OO        GGG::::::::::::G
--  D:::::::::::::::DD E::::::::::::::::::::E OO:::::::::::::OO    GG:::::::::::::::G
--  DDD:::::DDDDD:::::DEE::::::EEEEEEEEE::::EO:::::::OOO:::::::O  G:::::GGGGGGGG::::G
--    D:::::D    D:::::D E:::::E       EEEEEEO::::::O   O::::::O G:::::G       GGGGGG
--    D:::::D     D:::::DE:::::E             O:::::O     O:::::OG:::::G              
--    D:::::D     D:::::DE::::::EEEEEEEEEE   O:::::O     O:::::OG:::::G              
--    D:::::D     D:::::DE:::::::::::::::E   O:::::O     O:::::OG:::::G    GGGGGGGGGG
--    D:::::D     D:::::DE:::::::::::::::E   O:::::O     O:::::OG:::::G    G::::::::G
--    D:::::D     D:::::DE::::::EEEEEEEEEE   O:::::O     O:::::OG:::::G    GGGGG::::G
--    D:::::D     D:::::DE:::::E             O:::::O     O:::::OG:::::G        G::::G
--    D:::::D    D:::::D E:::::E       EEEEEEO::::::O   O::::::O G:::::G       G::::G
--  DDD:::::DDDDD:::::DEE::::::EEEEEEEE:::::EO:::::::OOO:::::::O  G:::::GGGGGGGG::::G
--  D:::::::::::::::DD E::::::::::::::::::::E OO:::::::::::::OO    GG:::::::::::::::G
--  D::::::::::::DDD   E::::::::::::::::::::E   OO:::::::::OO        GGG::::::GGG:::G
--  DDDDDDDDDDDDD      EEEEEEEEEEEEEEEEEEEEEE     OOOOOOOOO             GGGGGG   GGGG
--  
--  DaDam's Engine Of GUI (DEOG) A starfall GUI engine

--------------------

DEOG = {
    colors = {
        buttonNormal = Color(90, 90, 90),
        buttonHover = Color(70, 70, 70),
        sliderBar = Color(70, 70, 70),
        sliderCursor = Color(90, 90, 90),
        text = Color(255, 255, 255)
    }, objects = {
        buttons = {},
        sliders = {},
        checkbox = {},
        crashScreen = function() end
    }
}

DEOG.libData = "1.11"

local buttonKey = 15
local cursorX, cursorY

hook.add("inputPressed", "DEOG_BUTTON", function(key)
    if cursorX and key == buttonKey then
        for k, v in pairs(DEOG.objects.buttons) do
            if v.onPress then
                if cursorX >= v.pos.x - v.size.x/2 and cursorX <= v.pos.x + v.size.x/2 and cursorY >= v.pos.y - v.size.y/2 and cursorY <= v.pos.y + v.size.y/2 then
                    if v.hold then
                        v.onPress(true)
                    else
                        v.onPress()
                    end
                end
            end
        end
        
        for k, v in pairs(DEOG.objects.sliders) do
            if cursorX >= v.pos.x - v.size.x/2 and cursorX <= v.pos.x + v.size.x/2 and cursorY >= v.pos.y - v.size.y/2 and cursorY <= v.pos.y + v.size.y/2 then
                DEOG.objects.sliders[k].holding = true
            end
        end
        
        for k, v in pairs(DEOG.objects.checkbox) do
            if v.onChange then
                if cursorX >= v.pos.x - v.size.x/2 and cursorX <= v.pos.x + v.size.x/2 and cursorY >= v.pos.y - v.size.y/2 and cursorY <= v.pos.y + v.size.y/2 then
                    DEOG.objects.checkbox[k].state = not v.state
                    v.onChange(v.state)
                end
            end
        end
    end
end)

hook.add("inputReleased", "DEOG_BUTTON", function(key)
    for k, v in pairs(DEOG.objects.buttons) do
        if v.onPress and v.hold then
            v.onPress(false)
        end
    end
    
    for k, v in pairs(DEOG.objects.sliders) do
        DEOG.objects.sliders[k].holding = false
    end
end)

--------------------

function DEOG.setCrashScreen(func)
    DEOG.objects.crashScreen = func
end

function DEOG.checkCrash(maxPerf)
    if DEOL then
        --if not (math.max(quotaAverage(), quotaUsed()) < quotaMax() * maxPerf) then
        if quotaAverage() / quotaMax() > maxPerf then
            for hookName, v in pairs(hook.getTable()) do
                for name, func in pairs(v) do
                    hook.remove(hookName, name)
                end
            end
            
            for sound, v in pairs(bass.getTable()) do
                sound:stop()
            end
            
            hook.add("render", "DEOG_CRASHSCREEN", DEOG.objects.crashScreen)
            
            return true
        end
        
        return false
    else
        error("Woops! It seems like DEOL was not loaded correctly.")
    end
end

--------------------

function DEOG.setButtonKey(key)
    buttonKey = key
end

function DEOG.render(x, y, filter)
    cursorX, cursorY = x, y
    filter = filter or ""
    
    for k, v in pairs(DEOG.objects.buttons) do
        if string.find(k, filter) then
            if cursorX and cursorX >= v.pos.x - v.size.x/2 and cursorX <= v.pos.x + v.size.x/2 and cursorY >= v.pos.y - v.size.y/2 and cursorY <= v.pos.y + v.size.y/2 then
                render.setColor(v.hoverColor)
            else
                render.setColor(v.color)
            end
            
            render.drawRect(v.pos.x - v.size.x/2, v.pos.y - v.size.y/2, v.size.x, v.size.y)
            
            render.setColor(v.textColor)
            render.drawSimpleText(v.pos.x, v.pos.y, v.text, 1, 1)
        end
    end
    
    for k, v in pairs(DEOG.objects.sliders) do
        if cursorX and v.holding then
            if v.round then
                DEOG.objects.sliders[k].value = math.clamp(math.round((cursorX - v.pos.x + v.size.x/2) / v.size.x * v.maxValue + v.minValue), v.minValue, v.maxValue)
            else
                DEOG.objects.sliders[k].value = math.clamp((cursorX - v.pos.x + v.size.x/2) / v.size.x * v.maxValue + v.minValue, v.minValue, v.maxValue)
            end
            
            v.onChange(v.value)
        end
        
        if string.find(k, filter) then
            render.setColor(v.barColor)
            render.drawRect(v.pos.x - v.size.x/2, v.pos.y - 3, v.size.x, 6)
            
            render.setColor(v.cursorColor)
            render.drawRect(v.pos.x - v.size.x/2 - 5 + (v.value - v.minValue) / (v.maxValue - v.minValue) * v.size.x, v.pos.y - v.size.y/2, 5, v.size.y)
            
            render.setColor(v.textColor)
            render.drawSimpleText(v.pos.x + v.size.x/2 + 5, v.pos.y, v.value .. "", 0, 1)
        end
    end
    
    for k, v in pairs(DEOG.objects.checkbox) do
        if string.find(k, filter) then
            render.setColor(v.color)
            render.drawRect(v.pos.x - v.size.x/2, v.pos.y - v.size.y/2, v.size.x, v.size.y)
            
            render.setColor(v.textColor)
            render.drawSimpleText(v.pos.x - v.size.x/2 + v.size.y, v.pos.y, v.text, 0, 1)
            render.drawRect(v.pos.x - v.size.x/2 + 5, v.pos.y - v.size.y/2 + 5, v.size.y - 10, v.size.y - 10)
            
            if v.state then
                render.setColor(Color(0, 255, 0))
                render.drawRect(v.pos.x - v.size.x/2 + 7, v.pos.y - v.size.y/2 + 7, v.size.y - 14, v.size.y - 14)
            end
        end
    end
end

--------------------

function DEOG.createButton(name, parent)
    DEOG.objects.buttons[name] = {
        pos = Vector(0, 0),
        size = Vector(10, 10),
        parent = parent,
        text = "",
        onPress = nil,
        color = DEOG.colors.buttonNormal,
        hoverColor = DEOG.colors.buttonHover,
        textColor = DEOG.colors.text
    }
    
    return DEOG.objects.buttons[name]
end

function DEOG.removeButton(name)
    DEOG.objects.buttons[name] = nil
end

function DEOG.getButtonData(name)
    return DEOG.objects.buttons[name]
end

function DEOG.triggerButton(name)
    if DEOG.objects.buttons[name] then
        DEOG.objects.buttons[name].onPress()
    end
end


--------------------

function DEOG.createSlider(name, parent)
    DEOG.objects.sliders[name] = {
        pos = Vector(0, 0),
        size = Vector(40, 10),
        parent = parent,
        value = 1,
        minValue = 1,
        maxValue = 10,
        onChange = nil,
        round = false,
        barColor = DEOG.colors.sliderBar,
        cursorColor = DEOG.colors.sliderCursor,
        textColor = DEOG.colors.text
    }
    
    return DEOG.objects.sliders[name]
end

function DEOG.removeSlider(name)
    DEOG.objects.sliders[name] = nil
end

function DEOG.getSliderData(name)
    return DEOG.objects.sliders[name]
end

function DEOG.setSliderValue(name, value)
    local oldValue = DEOG.objects.sliders[name].value
    
    if DEOG.objects.sliders[name].round then
        DEOG.objects.sliders[name].value = math.round(value)
    else
        DEOG.objects.sliders[name].value = value
    end
    
    if value != oldValue then
        DEOG.objects.sliders[name].onChange(value)
    end
end

--------------------

function DEOG.createCheckbox(name, parent)
    DEOG.objects.checkbox[name] = {
        pos = Vector(0, 0),
        size = Vector(10, 10),
        parent = parent,
        text = "",
        state = false,
        onChange = nil,
        color = DEOG.colors.buttonNormal,
        textColor = DEOG.colors.text
    }
    
    return DEOG.objects.checkbox[name]
end

function DEOG.removeCheckbox(name)
    DEOG.objects.checkbox[name] = nil
end

function DEOG.getCheckboxData(name)
    return DEOG.objects.checkbox[name]
end

--------------------