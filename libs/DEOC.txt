--  DDDDDDDDDDDDD      EEEEEEEEEEEEEEEEEEEEEE     OOOOOOOOO             CCCCCCCCCCCCC
--  D::::::::::::DDD   E::::::::::::::::::::E   OO:::::::::OO        CCC::::::::::::C
--  D:::::::::::::::DD E::::::::::::::::::::E OO:::::::::::::OO    CC:::::::::::::::C
--  DDD:::::DDDDD:::::DEE::::::EEEEEEEEE::::EO:::::::OOO:::::::O  C:::::CCCCCCCC::::C
--    D:::::D    D:::::D E:::::E       EEEEEEO::::::O   O::::::O C:::::C       CCCCCC
--    D:::::D     D:::::DE:::::E             O:::::O     O:::::OC:::::C              
--    D:::::D     D:::::DE::::::EEEEEEEEEE   O:::::O     O:::::OC:::::C              
--    D:::::D     D:::::DE:::::::::::::::E   O:::::O     O:::::OC:::::C              
--    D:::::D     D:::::DE:::::::::::::::E   O:::::O     O:::::OC:::::C              
--    D:::::D     D:::::DE::::::EEEEEEEEEE   O:::::O     O:::::OC:::::C              
--    D:::::D     D:::::DE:::::E             O:::::O     O:::::OC:::::C              
--    D:::::D    D:::::D E:::::E       EEEEEEO::::::O   O::::::O C:::::C       CCCCCC
--  DDD:::::DDDDD:::::DEE::::::EEEEEEEE:::::EO:::::::OOO:::::::O  C:::::CCCCCCCC::::C
--  D:::::::::::::::DD E::::::::::::::::::::E OO:::::::::::::OO    CC:::::::::::::::C
--  D::::::::::::DDD   E::::::::::::::::::::E   OO:::::::::OO        CCC::::::::::::C
--  DDDDDDDDDDDDD      EEEEEEEEEEEEEEEEEEEEEE     OOOOOOOOO             CCCCCCCCCCCCC
--  
--  DaDam's Engine Of Collsions (DEOC) A 2D starfall collision engine

--------------------

DEOC = {}
DEOC.libData = "1.3"
DEOC.objects = {}
DEOC.lines = {}

local function objFilter(name, filter)
    for k, key in pairs(filter) do
        if string.find(name, key) then
            return false
        end
    end
    
    return true
end

local function doLinesIntersect(a, b, c, d)
    local L1 = {X1=a.x,Y1=a.y,X2=b.x,Y2=b.y}
    local L2 = {X1=c.x,Y1=c.y,X2=d.x,Y2=d.y}
    
    local d = (L2.Y2 - L2.Y1) * (L1.X2 - L1.X1) - (L2.X2 - L2.X1) * (L1.Y2 - L1.Y1)
    
    if d == 0 then
        return false
    end
    
    local n_a = (L2.X2 - L2.X1) * (L1.Y1 - L2.Y1) - (L2.Y2 - L2.Y1) * (L1.X1 - L2.X1)
    local n_b = (L1.X2 - L1.X1) * (L1.Y1 - L2.Y1) - (L1.Y2 - L1.Y1) * (L1.X1 - L2.X1)
    
    local ua = n_a / d
    local ub = n_b / d
    
    if ua >= 0 and ua <= 1 and ub >= 0 and ub <= 1 then
        local x = L1.X1 + (ua * (L1.X2 - L1.X1))
        local y = L1.Y1 + (ua * (L1.Y2 - L1.Y1))
        
        return Vector(x, y)
    end
    
    return nil
end

--------------------

function DEOC.renderHitboxes()
    local x, y = 0, 0
    
    if DEOV then
        x = DEOV.screenPos().x
        y = DEOV.screenPos().y
    end
    
    for k, v in pairs(DEOC.objects) do
        render.drawLine(v.pos.x - v.size.x/2 - x, v.pos.y - v.size.y/2 - y, v.pos.x - v.size.x/2 - x, v.pos.y + v.size.y/2 - y)
        render.drawLine(v.pos.x - v.size.x/2 - x, v.pos.y - v.size.y/2 - y, v.pos.x + v.size.x/2 - x, v.pos.y - v.size.y/2 - y)
        render.drawLine(v.pos.x + v.size.x/2 - x, v.pos.y - v.size.y/2 - y, v.pos.x + v.size.x/2 - x, v.pos.y + v.size.y/2 - y)
        render.drawLine(v.pos.x - v.size.x/2 - x, v.pos.y + v.size.y/2 - y, v.pos.x + v.size.x/2 - x, v.pos.y + v.size.y/2 - y)
        
        render.drawLine(v.pos.x - v.size.x/2 - x, v.pos.y - v.size.y/2 - y, v.pos.x + v.size.x/2 - x, v.pos.y + v.size.y/2 - y)
        render.drawLine(v.pos.x + v.size.x/2 - x, v.pos.y - v.size.y/2 - y, v.pos.x - v.size.x/2 - x, v.pos.y + v.size.y/2 - y)
    end
    
    for k, v in pairs(DEOC.lines) do
        render.drawLine(v.p1.x - x, v.p1.y -  y, v.p2.x - x, v.p2.y - y)
    end
end

--------------------

function DEOC.registerObject(name, pos, size, coll)
    if coll == nil then coll = true end
    
    DEOC.objects[name] = {
        name = name,
        pos = pos or Vector(0, 0),
        size = size or Vector(0, 0),
        coll = coll
    }
end

function DEOC.removeObject(name)
    DEOC.objects[name] = nil
end

function DEOC.existObject(name)
    return DEOC.objects[name] != nil
end

function DEOC.objectSize(name, size)
    if size then
        DEOC.objects[name].size = size
    else
        return DEOC.objects[name].size
    end
end

function DEOC.objectPos(name, pos)
    if pos then
        DEOC.objects[name].pos = pos
    else
        return DEOC.objects[name].pos
    end
end

function DEOC.objectCollisions(name, coll)
    if coll then
        DEOC.objects[name].coll = coll
    else
        return DEOC.objects[name].coll
    end
end

function DEOC.objectCallback(name, func)
    if func then
        DEOC.objects[name].callback = func
    else
        return DEOC.objects[name].callback
    end
end

--------------------

function DEOC.registerLine(p1, p2)
    table.insert(DEOC.lines, {p1 = p1, p2 = p2})
end

function DEOC.clearLines()
    DEOC.lines = {}
end

--------------------

function DEOC.clearObjects()
    DEOC.objects = {}
end

function DEOC.moveObject(name, dir, callback)
    if table.count(DEOC.objects) > 0 then
        local x, y = dir.x, dir.y
        
        if dir.x > 0 then
            for k, v in pairs(DEOC.objects) do
                if v.coll and v.name != name and v.pos.x - v.size.x/2 >= DEOC.objects[name].pos.x then
                    if DEOC.objects[name].pos.y + DEOC.objects[name].size.y/2 > v.pos.y - v.size.y/2 and DEOC.objects[name].pos.y - DEOC.objects[name].size.y/2 < v.pos.y + v.size.y/2 then
                        x = math.max(math.min(x, v.pos.x - v.size.x/2 - DEOC.objects[name].pos.x - DEOC.objects[name].size.x/2), 0)
                        
                        if x == 0 and v.callback then
                            v.callback(name)
                        end
                    end
                end
            end
            
            for k, v in pairs(DEOC.lines) do
                local intersectPoint = doLinesIntersect(DEOC.objects[name].pos, DEOC.objects[name].pos + Vector(dir.x*99999, 0), v.p1, v.p2)
                
                if intersectPoint then
                    x = math.clamp(intersectPoint.x - DEOC.objects[name].pos.x - DEOC.objects[name].size.x/2, 0, x)
                end
            end
        elseif dir.x < 0 then
            for k, v in pairs(DEOC.objects) do
                if v.coll and v.name != name and v.pos.x + v.size.x/2 <= DEOC.objects[name].pos.x then
                    if DEOC.objects[name].pos.y + DEOC.objects[name].size.y/2 > v.pos.y - v.size.y/2 and DEOC.objects[name].pos.y - DEOC.objects[name].size.y/2 < v.pos.y + v.size.y/2 then
                        x = math.min(math.max(x, v.pos.x + v.size.x/2 - DEOC.objects[name].pos.x + DEOC.objects[name].size.x/2), 0)
                        
                        if x == 0 and v.callback then
                            v.callback(name)
                        end
                    end
                end
            end
            
            for k, v in pairs(DEOC.lines) do
                local intersectPoint = doLinesIntersect(DEOC.objects[name].pos, DEOC.objects[name].pos + Vector(dir.x*99999, 0), v.p1, v.p2)
                
                if intersectPoint then
                    x = math.clamp(intersectPoint.x - DEOC.objects[name].pos.x + DEOC.objects[name].size.x/2, x, 0)
                end
            end
        end
        
        DEOC.objects[name].pos = Vector(DEOC.objects[name].pos.x + x, DEOC.objects[name].pos.y)
        
        if dir.y > 0 then
            for k, v in pairs(DEOC.objects) do
                if v.coll and v.name != name and v.pos.y - v.size.y/2 >= DEOC.objects[name].pos.y then
                    if DEOC.objects[name].pos.x + DEOC.objects[name].size.x/2 > v.pos.x - v.size.x/2 and DEOC.objects[name].pos.x - DEOC.objects[name].size.x/2 < v.pos.x + v.size.x/2 then
                        y = math.max(math.min(y, v.pos.y - v.size.y/2 - DEOC.objects[name].pos.y - DEOC.objects[name].size.y/2), 0)
                        
                        if y == 0 and v.callback then
                            v.callback(name)
                        end
                    end
                end
            end
            
            for k, v in pairs(DEOC.lines) do
                local intersectPoint = doLinesIntersect(DEOC.objects[name].pos, DEOC.objects[name].pos + Vector(0, dir.y*99999), v.p1, v.p2)
                
                if intersectPoint then
                    y = math.clamp(intersectPoint.y - DEOC.objects[name].pos.y - DEOC.objects[name].size.y/2, 0, y)
                end
            end
            
            --[[for k, v in pairs(DEOC.lines) do
                local mul = (1 - (DEOC.objects[name].pos.x - math.min(v.p1.x, v.p2.x)) / math.abs(v.p2.x - v.p1.x))
                local linePoint = math.abs(v.p2.y - v.p1.y) * mul
                
                if DEOC.objects[name].pos.x + DEOC.objects[name].size.x/2 > math.min(v.p1.x, v.p2.x) and DEOC.objects[name].pos.x - DEOC.objects[name].size.x/2 < math.max(v.p2.x, v.p2.x) and 
                   DEOC.objects[name].pos.y - DEOC.objects[name].size.y/2 < math.min(v.p2.y, v.p1.y) + linePoint then
                    local thing = linePoint - DEOC.objects[name].pos.y - DEOC.objects[name].size.y/2 - DEOC.objects[name].size.x/2 * (1 - mul)
                    
                    x = dir.y * (((thing < 1) and 1 or 0) * (v.p1.y - v.p2.y > 0 and -1 or 1))
                    y = math.max(math.min(y, thing), 0)
                    --print(y)
                end
            end]]
        elseif dir.y < 0 then
            for k, v in pairs(DEOC.objects) do
                if v.coll and v.name != name and v.pos.y + v.size.y/2 <= DEOC.objects[name].pos.y then
                    if DEOC.objects[name].pos.x + DEOC.objects[name].size.x/2 > v.pos.x - v.size.x/2 and DEOC.objects[name].pos.x - DEOC.objects[name].size.x/2 < v.pos.x + v.size.x/2 then
                        y = math.min(math.max(y, v.pos.y + v.size.y/2 - DEOC.objects[name].pos.y + DEOC.objects[name].size.y/2), 0)
                        
                        if y == 0 and v.callback then
                            v.callback(name)
                        end
                    end
                end
            end
            
            for k, v in pairs(DEOC.lines) do
                local intersectPoint = doLinesIntersect(DEOC.objects[name].pos, DEOC.objects[name].pos + Vector(0, dir.y*99999), v.p1, v.p2)
                
                if intersectPoint then
                    y = math.clamp(intersectPoint.y - DEOC.objects[name].pos.y + DEOC.objects[name].size.y/2, y, 0)
                end
            end
        end
        
        if callback then
            callback(dir.x < 0 and (x) == 0, dir.x > 0 and (x) == 0, dir.y < 0 and (y) == 0, dir.y > 0 and (y) == 0)
        end
        
        DEOC.objects[name].pos = Vector(DEOC.objects[name].pos.x, DEOC.objects[name].pos.y + y)
    end
end

--------------------

local function raycast(pos, dir, range, filter)
    local range = range or 99999
    
    local data = {
        hitPos = pos + dir * range,
        dist = 99999,
        object = "NULL",
        hit = false,
        normal = dir,
        hitNormal = dir,
        reflectNormal = dir
    }
    
    local lines = {}
    
    for k, v in pairs(DEOC.lines) do
        table.insert(lines, {p1 = v.p1, p2 = v.p2, ob = k})
    end
    
    if dir.x > 0 then
        for k, v in pairs(DEOC.objects) do
            --if objFilter(v.name, filter) then
                table.insert(lines, {
                    p1 = Vector(v.pos.x - v.size.x/2, v.pos.y - v.size.y/2),
                    p2 = Vector(v.pos.x - v.size.x/2, v.pos.y + v.size.y/2),
                    ob = v.name
                })
            --end
        end
    elseif dir.x < 0 then
        for k, v in pairs(DEOC.objects) do
            --if objFilter(v.name, filter) then
                table.insert(lines, {
                    p1 = Vector(v.pos.x + v.size.x/2, v.pos.y - v.size.y/2),
                    p2 = Vector(v.pos.x + v.size.x/2, v.pos.y + v.size.y/2),
                    ob = v.name
                })
            --end
        end
    end
    
    if dir.y > 0 then
        for k, v in pairs(DEOC.objects) do
            --if objFilter(v.name, filter) then
                table.insert(lines, {
                    p1 = Vector(v.pos.x - v.size.x/2, v.pos.y - v.size.y/2),
                    p2 = Vector(v.pos.x + v.size.x/2, v.pos.y - v.size.y/2),
                    ob = v.name
                })
            --end
        end
    elseif dir.y < 0 then
        for k, v in pairs(DEOC.objects) do
            --if objFilter(v.name, filter) then
                table.insert(lines, {
                    p1 = Vector(v.pos.x - v.size.x/2, v.pos.y + v.size.y/2),
                    p2 = Vector(v.pos.x + v.size.x/2, v.pos.y + v.size.y/2),
                    ob = v.name
                })
            --end
        end
    end
    
    if filter then
        local tbl = {}
        
        for k, v in pairs(lines) do
            if filter(v.ob) then
                table.insert(tbl, v)
            end
        end
        
        lines = tbl
    end
    
    for k, v in pairs(lines) do
        local intersectPoint = doLinesIntersect(pos, pos + dir*range, v.p1, v.p2)
        
        if intersectPoint then
            local dist = intersectPoint:getDistance(pos)
            
            if dist < data.dist then
                data.hitPos = intersectPoint
                data.dist = dist
                data.object = v.ob
                data.hit = true
                
                --local ang = math.rad(((v.p1 - v.p2):getAngle().yaw + 90) - ((intersectPoint - pos):getAngle().yaw))
                --data.hitNormal = Vector(math.sin(ang), math.cos(ang))
                local ang = math.rad((Vector(v.p1.x - v.p2.x, v.p1.y - v.p2.y)):getAngle().yaw)
                data.hitNormal = Vector(math.sin(ang), math.cos(ang))
                
                --local ang = math.rad((intersectPoint - pos):getAngle().yaw + 180)
                --data.reflectNormal = Vector(math.sin(ang), math.cos(ang))
                
                data.reflectNormal = -2 * dir:dot(data.hitNormal) * dir + data.hitNormal
            end
        end
    end
    
    return data
end

function DEOC.raycast(pos, dir, range, filter)
    if type(dir) == "number" then
        return raycast(Vector(pos.x, pos.y), Vector(math.cos(math.rad(dir)), math.sin(math.rad(dir))), range, filter)
    else
        return raycast(Vector(pos.x, pos.y), Vector(dir.x, dir.y), range, filter)
    end
end

--------------------

return DEOC





